name: twenty

networks:
  twenty-network:
    driver: bridge

services:
  server:
    # image: twentycrm/twenty:${TAG:-latest}
    build:
      context: ./twenty/
      dockerfile: ./packages/twenty-docker/twenty/Dockerfile
    volumes:
      - ./server-local-data:/app/packages/twenty-server/.local-storage
    ports:
      - "3003:3000"
    environment:
      NODE_PORT: 3000
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5432}/default
      SERVER_URL: ${SERVER_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:7379}
      DISABLE_DB_MIGRATIONS: ${DISABLE_DB_MIGRATIONS}
      DISABLE_CRON_JOBS_REGISTRATION: ${DISABLE_CRON_JOBS_REGISTRATION}

      STORAGE_TYPE: ${STORAGE_TYPE}
      # STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      # STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      # STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}

      IS_MULTIWORKSPACE_ENABLED: ${IS_MULTIWORKSPACE_ENABLED}

      APP_SECRET: ${APP_SECRET}

      MESSAGING_PROVIDER_GMAIL_ENABLED: ${MESSAGING_PROVIDER_GMAIL_ENABLED}
      CALENDAR_PROVIDER_GOOGLE_ENABLED: ${CALENDAR_PROVIDER_GOOGLE_ENABLED}
      AUTH_GOOGLE_CLIENT_ID: ${AUTH_GOOGLE_CLIENT_ID}
      AUTH_GOOGLE_CLIENT_SECRET: ${AUTH_GOOGLE_CLIENT_SECRET}
      AUTH_GOOGLE_CALLBACK_URL: ${AUTH_GOOGLE_CALLBACK_URL}
      AUTH_GOOGLE_APIS_CALLBACK_URL: ${AUTH_GOOGLE_APIS_CALLBACK_URL}

      # CALENDAR_PROVIDER_MICROSOFT_ENABLED: ${CALENDAR_PROVIDER_MICROSOFT_ENABLED}
      # MESSAGING_PROVIDER_MICROSOFT_ENABLED: ${MESSAGING_PROVIDER_MICROSOFT_ENABLED}
      # AUTH_MICROSOFT_ENABLED: ${AUTH_MICROSOFT_ENABLED}
      # AUTH_MICROSOFT_CLIENT_ID: ${AUTH_MICROSOFT_CLIENT_ID}
      # AUTH_MICROSOFT_CLIENT_SECRET: ${AUTH_MICROSOFT_CLIENT_SECRET}
      # AUTH_MICROSOFT_CALLBACK_URL: ${AUTH_MICROSOFT_CALLBACK_URL}
      # AUTH_MICROSOFT_APIS_CALLBACK_URL: ${AUTH_MICROSOFT_APIS_CALLBACK_URL}

      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS:-contact@yourdomain.com}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME:-"John from YourDomain"}
      EMAIL_SYSTEM_ADDRESS: ${EMAIL_SYSTEM_ADDRESS:-system@yourdomain.com}
      EMAIL_DRIVER: ${EMAIL_DRIVER:-smtp}
      EMAIL_SMTP_HOST: ${EMAIL_SMTP_HOST:-smtp.gmail.com}
      EMAIL_SMTP_PORT: ${EMAIL_SMTP_PORT:-465}
      EMAIL_SMTP_USER: ${EMAIL_SMTP_USER:-}
      EMAIL_SMTP_PASSWORD: ${EMAIL_SMTP_PASSWORD:-}

      MESSAGING_SINCE_DATE: ${MESSAGING_SINCE_DATE:-2025-06-15}
      OAI_KEY: ${OAI_KEY:-}

    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3000/healthz
      interval: 30s
      timeout: 30s
      retries: 20
    restart: always
    networks:
      - twenty-network

  worker:
    # image: twentycrm/twenty:${TAG:-latest}
    build:
      context: ./twenty/
      dockerfile: ./packages/twenty-docker/twenty/Dockerfile
    volumes:
      - ./server-local-data:/app/packages/twenty-server/.local-storage
    command: ["yarn", "worker:prod"]
    environment:
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5432}/default
      SERVER_URL: ${SERVER_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:7379}
      DISABLE_DB_MIGRATIONS: "true" # it already runs on the server
      DISABLE_CRON_JOBS_REGISTRATION: "true" # it already runs on the server

      STORAGE_TYPE: ${STORAGE_TYPE}
      # STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      # STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      # STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}

      IS_MULTIWORKSPACE_ENABLED: ${IS_MULTIWORKSPACE_ENABLED}

      APP_SECRET: ${APP_SECRET}

      MESSAGING_PROVIDER_GMAIL_ENABLED: ${MESSAGING_PROVIDER_GMAIL_ENABLED}
      CALENDAR_PROVIDER_GOOGLE_ENABLED: ${CALENDAR_PROVIDER_GOOGLE_ENABLED}
      AUTH_GOOGLE_CLIENT_ID: ${AUTH_GOOGLE_CLIENT_ID}
      AUTH_GOOGLE_CLIENT_SECRET: ${AUTH_GOOGLE_CLIENT_SECRET}
      AUTH_GOOGLE_CALLBACK_URL: ${AUTH_GOOGLE_CALLBACK_URL}
      AUTH_GOOGLE_APIS_CALLBACK_URL: ${AUTH_GOOGLE_APIS_CALLBACK_URL}

      # CALENDAR_PROVIDER_MICROSOFT_ENABLED: ${CALENDAR_PROVIDER_MICROSOFT_ENABLED}
      # MESSAGING_PROVIDER_MICROSOFT_ENABLED: ${MESSAGING_PROVIDER_MICROSOFT_ENABLED}
      # AUTH_MICROSOFT_ENABLED: ${AUTH_MICROSOFT_ENABLED}
      # AUTH_MICROSOFT_CLIENT_ID: ${AUTH_MICROSOFT_CLIENT_ID}
      # AUTH_MICROSOFT_CLIENT_SECRET: ${AUTH_MICROSOFT_CLIENT_SECRET}
      # AUTH_MICROSOFT_CALLBACK_URL: ${AUTH_MICROSOFT_CALLBACK_URL}
      # AUTH_MICROSOFT_APIS_CALLBACK_URL: ${AUTH_MICROSOFT_APIS_CALLBACK_URL}

      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS:-contact@yourdomain.com}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME:-"John from YourDomain"}
      EMAIL_SYSTEM_ADDRESS: ${EMAIL_SYSTEM_ADDRESS:-system@yourdomain.com}
      EMAIL_DRIVER: ${EMAIL_DRIVER:-smtp}
      EMAIL_SMTP_HOST: ${EMAIL_SMTP_HOST:-smtp.gmail.com}
      EMAIL_SMTP_PORT: ${EMAIL_SMTP_PORT:-465}
      EMAIL_SMTP_USER: ${EMAIL_SMTP_USER:-}
      EMAIL_SMTP_PASSWORD: ${EMAIL_SMTP_PASSWORD:-}

      MESSAGING_SINCE_DATE: ${MESSAGING_SINCE_DATE:-2025-06-15}
      OAI_KEY: ${OAI_KEY:-}

    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy
    restart: always
    networks:
      - twenty-network

  db:
    image: postgres:16
    volumes:
      - ./db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PG_DATABASE_USER}
      POSTGRES_PASSWORD: ${PG_DATABASE_PASSWORD}
    ports:
      - "6432:5432"
    healthcheck:
      test: pg_isready -U ${PG_DATABASE_USER} -h localhost -d postgres
      interval: 10s
      timeout: 20s
      retries: 10
    restart: always
    networks:
      - twenty-network

  adminer:
    image: ghcr.io/jeliebig/adminer-autologin:latest
    container_name: adminer
    ports:
      - "8088:8080"
    environment:
      # load the auto‑login plugin
      ADMINER_PLUGINS: login-env-vars
      # tell Adminer it’s Postgres
      ADMINER_DRIVER: pgsql
      # host:port of your DB container
      ADMINER_SERVER: "db:${PG_DATABASE_PORT:-5432}"
      # creds from your .env
      ADMINER_USERNAME: "${PG_DATABASE_USER:-postgres}"
      ADMINER_PASSWORD: "${PG_DATABASE_PASSWORD:-postgres}"
      # default DB name (change if you use something else)
      ADMINER_DB: default
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - twenty-network

  redis:
    image: redis
    restart: always
    command: ["--maxmemory-policy", "noeviction"]
    ports:
      - "7379:6379"
    networks:
      - twenty-network

  backup-scheduler:
    image: alpine:latest
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock:ro
    working_dir: /workspace
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    command: >
      sh -c "
        apk add --no-cache docker-cli docker-compose dcron bash &&
        echo 'alias \"docker compose\"=\"docker-compose\"' >> /etc/profile &&
        chmod +x /workspace/db-backup.sh &&
        echo '0 */4 * * * cd /workspace && source /etc/profile && /bin/bash /workspace/db-backup.sh automated > /var/log/backup.log 2>&1' > /etc/crontabs/root &&
        echo '0 */6 * * * find /workspace/db-backups-archive -name \"*.sql\" -type f -mtime +3 -delete && echo \"Cleaned old backups: \$$(date)\" >> /var/log/cleanup.log' >> /etc/crontabs/root &&
        mkdir -p /var/log &&
        echo \"Starting backup scheduler...\" &&
        crond -f
      "
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - twenty-network
