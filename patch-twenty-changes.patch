diff --git a/.gitignore b/.gitignore
index 97dc38ee81..df4e543dbc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -45,4 +45,7 @@ dump.rdb
 .crowdin.yml
 .react-email/
 
-mcp.json
\ No newline at end of file
+mcp.json
+.cursor/rules/nx-rules.mdc
+.github/instructions/nx.instructions.md
+.aider*
diff --git a/packages/twenty-docker/twenty/Dockerfile b/packages/twenty-docker/twenty/Dockerfile
index 3239a8e465..7aa9587a09 100644
--- a/packages/twenty-docker/twenty/Dockerfile
+++ b/packages/twenty-docker/twenty/Dockerfile
@@ -28,6 +28,7 @@ COPY ./packages/twenty-emails /app/packages/twenty-emails
 COPY ./packages/twenty-shared /app/packages/twenty-shared
 COPY ./packages/twenty-server /app/packages/twenty-server
 
+RUN rm -rf /app/packages/twenty-server/dist
 RUN npx nx run twenty-server:build
 RUN mv /app/packages/twenty-server/dist /app/packages/twenty-server/build
 RUN npx nx run twenty-server:build:packageJson
@@ -52,6 +53,9 @@ RUN npx nx build twenty-front
 # Final stage: Run the application
 FROM node:24-alpine as twenty
 
+# Stay as root for system package installations
+USER root
+
 # Used to run healthcheck in docker
 RUN apk add --no-cache curl jq
 
@@ -59,8 +63,14 @@ RUN npm install -g tsx
 
 RUN apk add --no-cache postgresql-client
 
-COPY ./packages/twenty-docker/twenty/entrypoint.sh /app/entrypoint.sh
+# Create directories with proper ownership from the start
+RUN mkdir -p /app/.local-storage /app/packages/twenty-server/.local-storage && \
+    chown -R node:node /app
+
+COPY --chown=node:node ./packages/twenty-docker/twenty/entrypoint.sh /app/entrypoint.sh
 RUN chmod +x /app/entrypoint.sh
+
+
 WORKDIR /app/packages/twenty-server
 
 ARG REACT_APP_SERVER_BASE_URL
@@ -70,19 +80,13 @@ ARG APP_VERSION
 ENV APP_VERSION $APP_VERSION
 
 # Copy built applications from previous stages
-COPY --chown=1000 --from=twenty-server-build /app /app
-COPY --chown=1000 --from=twenty-server-build /app/packages/twenty-server /app/packages/twenty-server
-COPY --chown=1000 --from=twenty-front-build /app/packages/twenty-front/build /app/packages/twenty-server/dist/front
+COPY --chown=node:node --from=twenty-server-build /app /app
+COPY --chown=node:node --from=twenty-server-build /app/packages/twenty-server /app/packages/twenty-server
+COPY --chown=node:node --from=twenty-front-build /app/packages/twenty-front/build /app/packages/twenty-server/dist/front
 
 # Set metadata and labels
 LABEL org.opencontainers.image.source=https://github.com/twentyhq/twenty
 LABEL org.opencontainers.image.description="This image provides a consistent and reproducible environment for the backend and frontend, ensuring it deploys faster and runs the same way regardless of the deployment environment."
 
-RUN mkdir -p /app/.local-storage /app/packages/twenty-server/.local-storage && \
-    chown -R 1000:1000 /app
-
-# Use non root user with uid 1000
-USER 1000
-
 CMD ["node", "dist/src/main"]
 ENTRYPOINT ["/app/entrypoint.sh"]
diff --git a/packages/twenty-server/src/database/commands/cron-register-all.command.ts b/packages/twenty-server/src/database/commands/cron-register-all.command.ts
index 4f13794235..f7a6b6e39b 100644
--- a/packages/twenty-server/src/database/commands/cron-register-all.command.ts
+++ b/packages/twenty-server/src/database/commands/cron-register-all.command.ts
@@ -6,6 +6,7 @@ import { CleanupOrphanedFilesCronCommand } from 'src/engine/core-modules/file/cr
 import { CalendarEventListFetchCronCommand } from 'src/modules/calendar/calendar-event-import-manager/crons/commands/calendar-event-list-fetch.cron.command';
 import { CalendarEventsImportCronCommand } from 'src/modules/calendar/calendar-event-import-manager/crons/commands/calendar-import.cron.command';
 import { CalendarOngoingStaleCronCommand } from 'src/modules/calendar/calendar-event-import-manager/crons/commands/calendar-ongoing-stale.cron.command';
+import { ConnectedAccountAutoReconnectCronCommand } from 'src/modules/connected-account/crons/commands/connected-account-auto-reconnect.cron.command';
 import { MessagingMessageListFetchCronCommand } from 'src/modules/messaging/message-import-manager/crons/commands/messaging-message-list-fetch.cron.command';
 import { MessagingMessagesImportCronCommand } from 'src/modules/messaging/message-import-manager/crons/commands/messaging-messages-import.cron.command';
 import { MessagingOngoingStaleCronCommand } from 'src/modules/messaging/message-import-manager/crons/commands/messaging-ongoing-stale.cron.command';
@@ -26,6 +27,7 @@ export class CronRegisterAllCommand extends CommandRunner {
     private readonly calendarEventListFetchCronCommand: CalendarEventListFetchCronCommand,
     private readonly calendarEventsImportCronCommand: CalendarEventsImportCronCommand,
     private readonly calendarOngoingStaleCronCommand: CalendarOngoingStaleCronCommand,
+    private readonly connectedAccountAutoReconnectCronCommand: ConnectedAccountAutoReconnectCronCommand,
     private readonly cronTriggerCronCommand: CronTriggerCronCommand,
     private readonly cleanupOrphanedFilesCronCommand: CleanupOrphanedFilesCronCommand,
     private readonly checkCustomDomainValidRecordsCronCommand: CheckCustomDomainValidRecordsCronCommand,
@@ -61,6 +63,10 @@ export class CronRegisterAllCommand extends CommandRunner {
         name: 'CalendarOngoingStale',
         command: this.calendarOngoingStaleCronCommand,
       },
+      {
+        name: 'ConnectedAccountAutoReconnect',
+        command: this.connectedAccountAutoReconnectCronCommand,
+      },
       { name: 'CronTrigger', command: this.cronTriggerCronCommand },
       {
         name: 'CleanupOrphanedFiles',
diff --git a/packages/twenty-server/src/database/commands/database-command.module.ts b/packages/twenty-server/src/database/commands/database-command.module.ts
index 16e43f875c..d3cfcf2974 100644
--- a/packages/twenty-server/src/database/commands/database-command.module.ts
+++ b/packages/twenty-server/src/database/commands/database-command.module.ts
@@ -7,6 +7,7 @@ import { UpgradeVersionCommandModule } from 'src/database/commands/upgrade-versi
 import { MigrateViewsToCoreCommand } from 'src/database/commands/views-migration/migrate-views-to-core.command';
 import { TypeORMModule } from 'src/database/typeorm/typeorm.module';
 import { ApiKeyModule } from 'src/engine/core-modules/api-key/api-key.module';
+import { DomainManagerModule } from 'src/engine/core-modules/domain-manager/domain-manager.module';
 import { FeatureFlagModule } from 'src/engine/core-modules/feature-flag/feature-flag.module';
 import { FileModule } from 'src/engine/core-modules/file/file.module';
 import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';
@@ -17,9 +18,9 @@ import { WorkspaceCacheStorageModule } from 'src/engine/workspace-cache-storage/
 import { DevSeederModule } from 'src/engine/workspace-manager/dev-seeder/dev-seeder.module';
 import { WorkspaceManagerModule } from 'src/engine/workspace-manager/workspace-manager.module';
 import { CalendarEventImportManagerModule } from 'src/modules/calendar/calendar-event-import-manager/calendar-event-import-manager.module';
+import { ConnectedAccountModule } from 'src/modules/connected-account/connected-account.module';
 import { MessagingImportManagerModule } from 'src/modules/messaging/message-import-manager/messaging-import-manager.module';
 import { AutomatedTriggerModule } from 'src/modules/workflow/workflow-trigger/automated-trigger/automated-trigger.module';
-import { DomainManagerModule } from 'src/engine/core-modules/domain-manager/domain-manager.module';
 
 import { DataSeedWorkspaceCommand } from './data-seed-dev-workspace.command';
 
@@ -34,6 +35,7 @@ import { DataSeedWorkspaceCommand } from './data-seed-dev-workspace.command';
     CalendarEventImportManagerModule,
     AutomatedTriggerModule,
     FileModule,
+    ConnectedAccountModule,
     DomainManagerModule,
 
     // Data seeding dependencies
diff --git a/packages/twenty-server/src/engine/core-modules/twenty-config/config-variables.ts b/packages/twenty-server/src/engine/core-modules/twenty-config/config-variables.ts
index 92c5227d74..2f7488711d 100644
--- a/packages/twenty-server/src/engine/core-modules/twenty-config/config-variables.ts
+++ b/packages/twenty-server/src/engine/core-modules/twenty-config/config-variables.ts
@@ -202,6 +202,15 @@ export class ConfigVariables {
   })
   MESSAGING_PROVIDER_MICROSOFT_ENABLED = false;
 
+  @ConfigVariablesMetadata({
+    group: ConfigVariablesGroup.Other,
+    description:
+      'Date to filter messages from (YYYY-MM-DD format). Only messages including and after this date will be loaded.',
+    type: ConfigVariableType.STRING,
+  })
+  @IsOptional()
+  MESSAGING_SINCE_DATE?: string;
+
   @ConfigVariablesMetadata({
     group: ConfigVariablesGroup.MicrosoftAuth,
     description: 'Enable or disable the Microsoft Calendar integration',
diff --git a/packages/twenty-server/src/modules/connected-account/connected-account.module.ts b/packages/twenty-server/src/modules/connected-account/connected-account.module.ts
index 3888f96036..e8614357e0 100644
--- a/packages/twenty-server/src/modules/connected-account/connected-account.module.ts
+++ b/packages/twenty-server/src/modules/connected-account/connected-account.module.ts
@@ -1,19 +1,40 @@
 import { Module } from '@nestjs/common';
+import { TypeOrmModule } from '@nestjs/typeorm';
 
+import { CacheStorageModule } from 'src/engine/core-modules/cache-storage/cache-storage.module';
+import { MetricsModule } from 'src/engine/core-modules/metrics/metrics.module';
 import { UserVarsModule } from 'src/engine/core-modules/user/user-vars/user-vars.module';
+import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';
+import { CalendarChannelSyncStatusService } from 'src/modules/calendar/common/services/calendar-channel-sync-status.service';
+import { ConnectedAccountAutoReconnectCronCommand } from 'src/modules/connected-account/crons/commands/connected-account-auto-reconnect.cron.command';
+import { ConnectedAccountAutoReconnectCronJob } from 'src/modules/connected-account/crons/jobs/connected-account-auto-reconnect.cron.job';
 import { DeleteWorkspaceMemberConnectedAccountsCleanupJob } from 'src/modules/connected-account/jobs/delete-workspace-member-connected-accounts.job';
 import { ConnectedAccountWorkspaceMemberListener } from 'src/modules/connected-account/listeners/connected-account-workspace-member.listener';
 import { ConnectedAccountListener } from 'src/modules/connected-account/listeners/connected-account.listener';
 import { AccountsToReconnectService } from 'src/modules/connected-account/services/accounts-to-reconnect.service';
+import { MessageChannelSyncStatusService } from 'src/modules/messaging/common/services/message-channel-sync-status.service';
 
 @Module({
-  imports: [UserVarsModule],
+  imports: [
+    UserVarsModule,
+    TypeOrmModule.forFeature([Workspace], 'core'),
+    CacheStorageModule,
+    MetricsModule,
+  ],
   providers: [
     AccountsToReconnectService,
     ConnectedAccountListener,
     DeleteWorkspaceMemberConnectedAccountsCleanupJob,
     ConnectedAccountWorkspaceMemberListener,
+    ConnectedAccountAutoReconnectCronJob,
+    ConnectedAccountAutoReconnectCronCommand,
+    MessageChannelSyncStatusService,
+    CalendarChannelSyncStatusService,
+  ],
+  exports: [
+    AccountsToReconnectService,
+    ConnectedAccountAutoReconnectCronCommand,
+    ConnectedAccountAutoReconnectCronJob,
   ],
-  exports: [AccountsToReconnectService],
 })
 export class ConnectedAccountModule {}
diff --git a/packages/twenty-server/src/modules/connected-account/crons/commands/connected-account-auto-reconnect.cron.command.ts b/packages/twenty-server/src/modules/connected-account/crons/commands/connected-account-auto-reconnect.cron.command.ts
new file mode 100644
index 0000000000..44ff5ac1c4
--- /dev/null
+++ b/packages/twenty-server/src/modules/connected-account/crons/commands/connected-account-auto-reconnect.cron.command.ts
@@ -0,0 +1,34 @@
+import { Command, CommandRunner } from 'nest-commander';
+
+import { InjectMessageQueue } from 'src/engine/core-modules/message-queue/decorators/message-queue.decorator';
+import { MessageQueue } from 'src/engine/core-modules/message-queue/message-queue.constants';
+import { MessageQueueService } from 'src/engine/core-modules/message-queue/services/message-queue.service';
+import {
+  CONNECTED_ACCOUNT_AUTO_RECONNECT_CRON_PATTERN,
+  ConnectedAccountAutoReconnectCronJob,
+} from 'src/modules/connected-account/crons/jobs/connected-account-auto-reconnect.cron.job';
+
+@Command({
+  name: 'cron:connected-account:auto-reconnect',
+  description: 'Starts a cron job to auto-reconnect failed connected accounts',
+})
+export class ConnectedAccountAutoReconnectCronCommand extends CommandRunner {
+  constructor(
+    @InjectMessageQueue(MessageQueue.cronQueue)
+    private readonly messageQueueService: MessageQueueService,
+  ) {
+    super();
+  }
+
+  async run(): Promise<void> {
+    await this.messageQueueService.addCron<undefined>({
+      jobName: ConnectedAccountAutoReconnectCronJob.name,
+      data: undefined,
+      options: {
+        repeat: {
+          pattern: CONNECTED_ACCOUNT_AUTO_RECONNECT_CRON_PATTERN,
+        },
+      },
+    });
+  }
+}
diff --git a/packages/twenty-server/src/modules/connected-account/crons/jobs/connected-account-auto-reconnect.cron.job.ts b/packages/twenty-server/src/modules/connected-account/crons/jobs/connected-account-auto-reconnect.cron.job.ts
new file mode 100644
index 0000000000..099ce628b7
--- /dev/null
+++ b/packages/twenty-server/src/modules/connected-account/crons/jobs/connected-account-auto-reconnect.cron.job.ts
@@ -0,0 +1,251 @@
+import { Logger } from '@nestjs/common';
+import { InjectRepository } from '@nestjs/typeorm';
+
+import { WorkspaceActivationStatus } from 'twenty-shared/workspace';
+import { In, IsNull, Not, Repository } from 'typeorm';
+
+import { SentryCronMonitor } from 'src/engine/core-modules/cron/sentry-cron-monitor.decorator';
+import { ExceptionHandlerService } from 'src/engine/core-modules/exception-handler/exception-handler.service';
+import { Process } from 'src/engine/core-modules/message-queue/decorators/process.decorator';
+import { Processor } from 'src/engine/core-modules/message-queue/decorators/processor.decorator';
+import { MessageQueue } from 'src/engine/core-modules/message-queue/message-queue.constants';
+import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';
+import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';
+import {
+  CalendarChannelSyncStage,
+  CalendarChannelSyncStatus,
+  CalendarChannelWorkspaceEntity,
+} from 'src/modules/calendar/common/standard-objects/calendar-channel.workspace-entity';
+import { AccountsToReconnectService } from 'src/modules/connected-account/services/accounts-to-reconnect.service';
+import { ConnectedAccountWorkspaceEntity } from 'src/modules/connected-account/standard-objects/connected-account.workspace-entity';
+import {
+  MessageChannelSyncStage,
+  MessageChannelSyncStatus,
+  MessageChannelWorkspaceEntity,
+} from 'src/modules/messaging/common/standard-objects/message-channel.workspace-entity';
+
+export const CONNECTED_ACCOUNT_AUTO_RECONNECT_CRON_PATTERN = '*/5 * * * *'; // Every 5 minutes
+
+@Processor(MessageQueue.cronQueue)
+export class ConnectedAccountAutoReconnectCronJob {
+  private readonly logger = new Logger(
+    ConnectedAccountAutoReconnectCronJob.name,
+  );
+
+  constructor(
+    @InjectRepository(Workspace, 'core')
+    private readonly workspaceRepository: Repository<Workspace>,
+    private readonly twentyORMGlobalManager: TwentyORMGlobalManager,
+    private readonly accountsToReconnectService: AccountsToReconnectService,
+    private readonly exceptionHandlerService: ExceptionHandlerService,
+  ) {}
+
+  @Process(ConnectedAccountAutoReconnectCronJob.name)
+  @SentryCronMonitor(
+    ConnectedAccountAutoReconnectCronJob.name,
+    CONNECTED_ACCOUNT_AUTO_RECONNECT_CRON_PATTERN,
+  )
+  async handle(): Promise<void> {
+    this.logger.log('Starting connected account auto-reconnect job');
+
+    const activeWorkspaces = await this.workspaceRepository.find({
+      where: {
+        activationStatus: WorkspaceActivationStatus.ACTIVE,
+      },
+    });
+
+    for (const workspace of activeWorkspaces) {
+      try {
+        await this.processWorkspaceFailures(workspace.id);
+      } catch (error) {
+        this.exceptionHandlerService.captureExceptions([error], {
+          workspace: {
+            id: workspace.id,
+          },
+        });
+      }
+    }
+
+    this.logger.log('Completed connected account auto-reconnect job');
+  }
+
+  private async processWorkspaceFailures(workspaceId: string): Promise<void> {
+    // Process all failed connected accounts
+    await this.resetFailedConnectedAccounts(workspaceId);
+
+    // Process all failed message channels
+    await this.resetFailedMessageChannels(workspaceId);
+
+    // Process all failed calendar channels
+    await this.resetFailedCalendarChannels(workspaceId);
+  }
+
+  private async resetFailedConnectedAccounts(
+    workspaceId: string,
+  ): Promise<void> {
+    try {
+      const connectedAccountRepository =
+        await this.twentyORMGlobalManager.getRepositoryForWorkspace<ConnectedAccountWorkspaceEntity>(
+          workspaceId,
+          'connectedAccount',
+        );
+
+      // Get all connected accounts that have authFailedAt set
+      const failedConnectedAccounts = await connectedAccountRepository.find({
+        where: {
+          authFailedAt: Not(IsNull()),
+        },
+        relations: {
+          accountOwner: true,
+        },
+      });
+
+      if (failedConnectedAccounts.length === 0) {
+        return;
+      }
+
+      this.logger.log(
+        `Resetting ${failedConnectedAccounts.length} failed connected accounts in workspace ${workspaceId}`,
+      );
+
+      // Reset all failed connected accounts
+      const failedAccountIds = failedConnectedAccounts.map(
+        (account) => account.id,
+      );
+
+      await connectedAccountRepository.update(failedAccountIds, {
+        authFailedAt: null,
+      });
+
+      // Remove from accounts to reconnect queue
+      for (const connectedAccount of failedConnectedAccounts) {
+        await this.accountsToReconnectService.removeAccountToReconnect(
+          connectedAccount.accountOwner.userId,
+          workspaceId,
+          connectedAccount.id,
+        );
+      }
+
+      this.logger.log(
+        `Successfully reset ${failedConnectedAccounts.length} connected accounts in workspace ${workspaceId}`,
+      );
+    } catch (error) {
+      this.logger.error(
+        `Failed to reset connected accounts in workspace ${workspaceId}`,
+        error,
+      );
+    }
+  }
+
+  private async resetFailedMessageChannels(workspaceId: string): Promise<void> {
+    try {
+      const messageChannelRepository =
+        await this.twentyORMGlobalManager.getRepositoryForWorkspace<MessageChannelWorkspaceEntity>(
+          workspaceId,
+          'messageChannel',
+        );
+
+      // Find all message channels with failed status or stage
+      const failedMessageChannels = await messageChannelRepository.find({
+        where: [
+          {
+            syncStatus: In([
+              MessageChannelSyncStatus.FAILED_INSUFFICIENT_PERMISSIONS,
+              MessageChannelSyncStatus.FAILED_UNKNOWN,
+            ]),
+          },
+          {
+            syncStage: MessageChannelSyncStage.FAILED,
+          },
+        ],
+      });
+
+      if (failedMessageChannels.length === 0) {
+        return;
+      }
+
+      this.logger.log(
+        `Resetting ${failedMessageChannels.length} failed message channels in workspace ${workspaceId}`,
+      );
+
+      const failedChannelIds = failedMessageChannels.map(
+        (channel) => channel.id,
+      );
+
+      // Reset sync status and stage for all failed message channels
+      await messageChannelRepository.update(failedChannelIds, {
+        syncStatus: MessageChannelSyncStatus.ACTIVE,
+        syncStage: MessageChannelSyncStage.FULL_MESSAGE_LIST_FETCH_PENDING,
+        syncStageStartedAt: null,
+        throttleFailureCount: 0,
+        syncCursor: undefined,
+      });
+
+      this.logger.log(
+        `Successfully reset ${failedMessageChannels.length} message channels in workspace ${workspaceId}`,
+      );
+    } catch (error) {
+      this.logger.error(
+        `Failed to reset message channels in workspace ${workspaceId}`,
+        error,
+      );
+    }
+  }
+
+  private async resetFailedCalendarChannels(
+    workspaceId: string,
+  ): Promise<void> {
+    try {
+      const calendarChannelRepository =
+        await this.twentyORMGlobalManager.getRepositoryForWorkspace<CalendarChannelWorkspaceEntity>(
+          workspaceId,
+          'calendarChannel',
+        );
+
+      // Find all calendar channels with failed status or stage
+      const failedCalendarChannels = await calendarChannelRepository.find({
+        where: [
+          {
+            syncStatus: In([
+              CalendarChannelSyncStatus.FAILED_INSUFFICIENT_PERMISSIONS,
+              CalendarChannelSyncStatus.FAILED_UNKNOWN,
+            ]),
+          },
+          {
+            syncStage: CalendarChannelSyncStage.FAILED,
+          },
+        ],
+      });
+
+      if (failedCalendarChannels.length === 0) {
+        return;
+      }
+
+      this.logger.log(
+        `Resetting ${failedCalendarChannels.length} failed calendar channels in workspace ${workspaceId}`,
+      );
+
+      const failedChannelIds = failedCalendarChannels.map(
+        (channel) => channel.id,
+      );
+
+      // Reset sync status and stage for all failed calendar channels
+      await calendarChannelRepository.update(failedChannelIds, {
+        syncStatus: CalendarChannelSyncStatus.ACTIVE,
+        syncStage:
+          CalendarChannelSyncStage.FULL_CALENDAR_EVENT_LIST_FETCH_PENDING,
+        throttleFailureCount: 0,
+        syncStageStartedAt: null,
+      });
+
+      this.logger.log(
+        `Successfully reset ${failedCalendarChannels.length} calendar channels in workspace ${workspaceId}`,
+      );
+    } catch (error) {
+      this.logger.error(
+        `Failed to reset calendar channels in workspace ${workspaceId}`,
+        error,
+      );
+    }
+  }
+}
diff --git a/packages/twenty-server/src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-get-message-list.service.ts b/packages/twenty-server/src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-get-message-list.service.ts
index 17aa6f6861..dbff286280 100644
--- a/packages/twenty-server/src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-get-message-list.service.ts
+++ b/packages/twenty-server/src/modules/messaging/message-import-manager/drivers/gmail/services/gmail-get-message-list.service.ts
@@ -1,6 +1,9 @@
-import { Injectable } from '@nestjs/common';
+import { Injectable, Logger } from '@nestjs/common';
 
 import { isNonEmptyString } from '@sniptt/guards';
+import { format, parseISO, isValid } from 'date-fns';
+import { TwentyConfigService } from 'src/engine/core-modules/twenty-config/twenty-config.service';
+
 import { gmail_v1 as gmailV1 } from 'googleapis';
 import { isDefined } from 'twenty-shared/utils';
 
@@ -24,12 +27,43 @@ import { assertNotNull } from 'src/utils/assert';
 
 @Injectable()
 export class GmailGetMessageListService {
+  private readonly logger = new Logger(GmailGetMessageListService.name);
+
   constructor(
     private readonly gmailClientProvider: GmailClientProvider,
     private readonly gmailGetHistoryService: GmailGetHistoryService,
     private readonly gmailHandleErrorService: GmailHandleErrorService,
+    private readonly twentyConfigService: TwentyConfigService,
   ) {}
 
+  private buildGmailSearchQuery(excludedCategories: string[]): string {
+    let searchQuery =
+      computeGmailCategoryExcludeSearchFilter(excludedCategories);
+
+    const messagingSinceDate = this.twentyConfigService.get(
+      'MESSAGING_SINCE_DATE',
+    );
+
+    if (isNonEmptyString(messagingSinceDate)) {
+      // Convert date to Gmail's expected format (YYYY/MM/DD)
+      try {
+        const date = parseISO(messagingSinceDate);
+        if (isValid(date)) {
+          // Format date as YYYY/MM/DD for Gmail search
+          const gmailDateFilter = `after:${format(date, 'yyyy/MM/dd')}`;
+
+          searchQuery = searchQuery
+            ? `${searchQuery} ${gmailDateFilter}`
+            : gmailDateFilter;
+        }
+      } catch (error) {
+        // Invalid date format, ignore the filter
+      }
+    }
+
+    return searchQuery;
+  }
+
   private async getMessageListWithoutCursor(
     connectedAccount: Pick<
       ConnectedAccountWorkspaceEntity,
@@ -45,6 +79,11 @@ export class GmailGetMessageListService {
 
     const messageExternalIds: string[] = [];
     const excludedCategories = this.comptuteExcludedCategories(messageFolders);
+    const searchQuery = this.buildGmailSearchQuery(excludedCategories);
+
+    this.logger.log(
+      `Starting Gmail message list fetch for account ${connectedAccount.id} with search query: "${searchQuery}"`,
+    );
 
     while (hasMoreMessages) {
       const messageList = await gmailClient.users.messages
@@ -52,7 +91,7 @@ export class GmailGetMessageListService {
           userId: 'me',
           maxResults: MESSAGING_GMAIL_USERS_MESSAGES_LIST_MAX_RESULT,
           pageToken,
-          q: computeGmailCategoryExcludeSearchFilter(excludedCategories),
+          q: searchQuery,
         })
         .catch((error) => {
           this.gmailHandleErrorService.handleGmailMessageListFetchError(error);
@@ -69,9 +108,16 @@ export class GmailGetMessageListService {
       const hasMessages = messages && messages.length > 0;
 
       if (!hasMessages) {
+        this.logger.log(
+          `No more messages found for account ${connectedAccount.id}, ending pagination`,
+        );
         break;
       }
 
+      this.logger.log(
+        `Retrieved ${messages.length} messages for account ${connectedAccount.id}`,
+      );
+
       pageToken = messageList.data.nextPageToken ?? undefined;
       hasMoreMessages = !!pageToken;
 
@@ -79,6 +125,10 @@ export class GmailGetMessageListService {
       messageExternalIds.push(...messages.map((message) => message.id));
     }
 
+    this.logger.log(
+      `Completed Gmail message list fetch for account ${connectedAccount.id}, total messages: ${messageExternalIds.length}`,
+    );
+
     if (messageExternalIds.length === 0) {
       return [
         {
